<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ysh.CoS.mapper.freeBoardMapper">

	<select id="list" parameterType="hashmap" resultType="com.ysh.CoS.dto.boardDTO">
	
		select r.*, (case when bc.bcmt is null then 0 else bc.bcmt end) as bCmt from (select bseq, count(bSeq) as bcmt from tblBcmt group by bSeq) bc right outer join (select b.*, m.nickName, ROW_NUMBER() OVER(order by bSeq desc) as 'bNo' from tblBoard b inner join tblMember m on b.mseq = m.mseq) r on bc.bSeq = r.bSeq where bNo between ${begin} and ${end} order by bNo
	
	</select>
	
	<select id="listSingleSearch" parameterType="hashmap" resultType="com.ysh.CoS.dto.boardDTO">
	
		select r.*, (case when bc.bcmt is null then 0 else bc.bcmt end) as bCmt from (select bseq, count(bSeq) as bcmt from tblBcmt group by bSeq) bc right outer join (select b.*, m.nickName, ROW_NUMBER() OVER(order by bSeq desc) as 'bNo' from tblBoard b inner join tblMember m on b.mseq = m.mseq where ${search} like '%${word}%') r on bc.bSeq = r.bSeq where bNo between ${begin} and ${end} order by bNo
	
	</select>
	
	<select id="listAllSearch" parameterType="hashmap" resultType="com.ysh.CoS.dto.boardDTO">
	
		select r.*, (case when bc.bcmt is null then 0 else bc.bcmt end) as bCmt from (select bseq, count(bSeq) as bcmt from tblBcmt group by bSeq) bc right outer join (select b.*, m.nickName, ROW_NUMBER() OVER(order by bSeq desc) as 'bNo' from tblBoard b inner join tblMember m on b.mseq = m.mseq where bTitle like '%${word}%' || bContent like '%${word}%' || nickName like '%${word}%') r on bc.bSeq = r.bSeq where bNo between ${begin} and ${end} order by bNo
	
	</select>
	
	<select id="getTotalCount" parameterType="hashmap" resultType="Integer">
	
		select count(*) from tblBoard
	
	</select>
	
	<select id="getSingleSearchCount" parameterType="hashmap" resultType="Integer">
	
		select count(*) from tblBoard b inner join tblMember m on b.mseq = m.mseq where ${search} like '%${word}%'
	
	</select>
	
	<select id="getAllSearchCount" parameterType="hashmap" resultType="Integer">
	
		select count(*) from tblBoard b inner join tblMember m on b.mseq = m.mseq where bTitle like '%${word}%' || bContent like '%${word}%' || nickName like '%${word}%'
	
	</select>
	
	<select id="getBoardInfo" parameterType="String" resultType="com.ysh.CoS.dto.boardDTO">
	
		select m.nickName, m.auth, m.img, b.bSeq, b.mSeq, b.bTitle, b.bContent, b.bDate, b.bCount, b.bFile, (case when b.count is null then 0 else b.count end)as count from tblMember m inner join (select b.*, bg.count from tblBoard b left outer join (select bSeq, count(bSeq) as count from tblBGood group by bSeq) bg on b.bSeq = bg.bSeq) b on m.mSeq = b.mSeq where bSeq = ${bSeq}

	</select>
	
	<update id="increaseCount" parameterType="String">
	
		update tblBoard set bCount = ${count} where bSeq = ${bSeq}
		
	</update>
	
	<select id="getLogImg" parameterType="String" resultType="String">
	
		select img from tblMember where mSeq = ${mSeq}
	
	</select>
	
	<select id="flagLike" parameterType="String" resultType="Integer">
	
		select count(*) from tblBgood where bSeq = ${bSeq} and mSeq = ${mSeq}
	
	</select>
	
	<insert id="addLike" parameterType="String">
	
		INSERT INTO tblBgood (mSeq, bSeq) VALUES (${mSeq}, ${bSeq})
	
	</insert>
	
	<delete id="removeLike" parameterType="String">
	
		delete from tblBgood where mSeq = ${mSeq} and bSeq = ${bSeq}
	
	</delete>
	
	<insert id="addFreeBoard" parameterType="com.ysh.CoS.dto.boardDTO">
	
		INSERT INTO tblBoard (mSeq, bTitle, bContent, bDate, bCount, bFile) VALUES (#{mSeq}, #{bTitle}, #{bContent}, default, default, #{bFile})
	
	</insert>
	
	<select id="getNickName" parameterType="String" resultType="String">
	
		select nickName from tblMember where mSeq = ${mSeq}
	
	</select>
	
	<select id="getEditInfo" parameterType="String" resultType="com.ysh.CoS.dto.boardDTO">
	
		select b.*, m.nickName from tblBoard b inner join tblMember m on b.mSeq = m.mSeq where bSeq = ${bSeq}
	
	</select>
	
	<update id="editNFreeBoard" parameterType="com.ysh.CoS.dto.boardDTO">
	
		update tblBoard set bTitle = #{bTitle}, bContent = #{bContent} where bSeq = #{bSeq}
		
	</update>
	
	<update id="editFreeBoard" parameterType="com.ysh.CoS.dto.boardDTO">
	
		update tblBoard set bTitle = #{bTitle}, bContent = #{bContent}, bFile = #{bFile} where bSeq = #{bSeq}
		
	</update>
	
	<select id="getFileNamed" parameterType="String" resultType="String">
	
		select bFile from tblBoard where bSeq = ${bSeq}
	
	</select>
	
	<delete id="delBgood" parameterType="String">
	
		delete from tblBgood where bSeq = ${bSeq}
	
	</delete>
	
	<delete id="delBcmt" parameterType="String">
	
		delete from tblBcmt where bSeq = ${bSeq}
	
	</delete>
	
	<delete id="delBoard" parameterType="String">
	
		delete from tblBoard where bSeq = ${bSeq}
	
	</delete>
	
	<select id="selectBcRef" parameterType="String" resultType="Object">
	
		select max(bcRef) from tblBcmt where bSeq = ${bSeq}
	
	</select>
	
	<insert id="addFirstComment" parameterType="com.ysh.CoS.dto.bCmtDTO">
	
		INSERT INTO tblBcmt (mSeq, bcDate, bSeq, bcRef, bcStep, bcLevel, bcDell, bcContent) VALUES (#{mSeq}, default, #{bSeq}, #{bcRef}, 0, 0, default, #{bcContent})
	
	</insert>
	
	<select id="getCommentList" parameterType="String" resultType="com.ysh.CoS.dto.bCmtDTO">
	
		select bc.*, m.nickName, m.auth, m.img from tblBcmt bc inner join tblMember m on bc.mSeq = m.mSeq where bSeq = ${bSeq} order by bcRef, bcStep, bcLevel
	
	</select>
	
	<select id="getMaxStep" parameterType="com.ysh.CoS.dto.bCmtDTO" resultType="Integer">
	
		select max(bcStep) from tblBcmt where bSeq = ${bSeq} and bcRef = ${bcRef} order by bcRef, bcStep, bcLevel
	
	</select>
	
	<select id="getRank" parameterType="com.ysh.CoS.dto.bCmtDTO" resultType="String">
	
		select rank from (select *, RANK() over (order by bcRef, bcStep, bcLevel) as 'rank' from tblBcmt where bSeq = ${bSeq} and bcRef = ${bcRef}) cmt where bcSeq = ${bcSeq}
	
	</select>
	
	<select id="getNextbcSeq" parameterType="String" resultType="Object">
	
		select bcSeq from (select *, RANK() over (order by bcRef, bcStep, bcLevel) as 'rank' from tblBcmt where bSeq = ${bSeq} and bcRef = ${bcRef}) cmt where rank = ${rank}
	
	</select>
	
	<select id="getNextBcLevel" parameterType="Object" resultType="String">
	
		select bcLevel from tblBcmt where bcSeq = ${bcSeq} 
	
	</select>
	
	<update id="updateIncBcStep" parameterType="com.ysh.CoS.dto.bCmtDTO">
	
		update tblBcmt set bcStep = bcStep + 1 where bSeq = ${bSeq} and bcRef = ${bcRef} and bcStep >= ${bcStep}
		
	</update>
	
	<insert id="addSubComment" parameterType="com.ysh.CoS.dto.bCmtDTO">
	
		INSERT INTO tblBcmt (mSeq, bcDate, bSeq, bcRef, bcStep, bcLevel, bcDell, bcContent) VALUES (#{mSeq}, default, #{bSeq}, #{bcRef}, #{bcStep}, #{bcLevel}, default, #{bcContent})
	
	</insert>
	
	<select id="getBcmtInfo" parameterType="com.ysh.CoS.dto.bCmtDTO" resultType="com.ysh.CoS.dto.bCmtDTO">
	
		select * from (select *, RANK() over (order by bcRef, bcStep, bcLevel) as 'rank' from tblBcmt where bSeq = ${bSeq} and bcRef = ${bcRef}) cmt where bcStep = ${bcStep} and bcLevel = ${bcLevel}
	
	</select>
	
	<select id="getNextRankBcmtInfo" parameterType="com.ysh.CoS.dto.bCmtDTO" resultType="com.ysh.CoS.dto.bCmtDTO">
	
		select * from (select *, RANK() over (order by bcRef, bcStep, bcLevel) as 'rank' from tblBcmt where bSeq = ${bSeq} and bcRef = ${bcRef}) cmt where rank = ${rank}
	
	</select>
	
	<update id="updateDell" parameterType="String">
	
		update tblBcmt set bcDell = 'y' where bcSeq = ${bcSeq}
		
	</update>
	
</mapper>